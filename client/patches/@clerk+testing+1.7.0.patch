diff --git a/node_modules/@clerk/testing/dist/playwright/index.js b/node_modules/@clerk/testing/dist/playwright/index.js
index 8c60d99..408b9af 100644
--- a/node_modules/@clerk/testing/dist/playwright/index.js
+++ b/node_modules/@clerk/testing/dist/playwright/index.js
@@ -6,5 +6,5 @@
 
        Any email with the +clerk_test subaddress is a test email address.
 
-       Learn more here: https://clerk.com/docs/testing/test-emails-and-phones#email-addresses`);let{supportedFirstFactors:n}=await o.create({identifier:e.identifier}),c=e.strategy==="phone_code"?s=>s.strategy==="phone_code":s=>s.strategy==="email_code",i=n?.find(c);if(i){let s=e.strategy==="phone_code"?{strategy:e.strategy,phoneNumberId:i.phoneNumberId}:{strategy:e.strategy,emailAddressId:i.emailAddressId};await o.prepareFirstFactor(s);let a=await o.attemptFirstFactor({strategy:e.strategy,code:"424242"});if(a.status==="complete")await t.Clerk.setActive({session:a.createdSessionId});else throw new Error(`Status is ${a.status}`)}else throw new Error(`${e.strategy} is not enabled.`)}}catch(t){throw new Error(`Clerk: Failed to sign in: ${t?.message}`)}};var f=async e=>{let{CLERK_FAPI:r,CLERK_TESTING_TOKEN:t}=await y(e);process.env.CLERK_FAPI=r,process.env.CLERK_TESTING_TOKEN=t};var k=async({context:e,options:r,page:t})=>{let o=e??t?.context();if(!o)throw new Error("Either context or page must be provided to setup testing token");let n=r?.frontendApiUrl||process.env.CLERK_FAPI;if(!n)throw new Error(h);let c=`https://${n}/v1/**/*`;await o.route(c,async i=>{let s=new URL(i.request().url()),a=process.env.CLERK_TESTING_TOKEN;a&&s.searchParams.set(E,a);try{let m=await i.fetch({url:s.toString()}),l=await m.json();l?.response?.captcha_bypass===!1&&(l.response.captcha_bypass=!0),l?.client?.captcha_bypass===!1&&(l.client.captcha_bypass=!0),await i.fulfill({response:m,json:l})}catch{await i.continue({url:s.toString()}).catch(console.error)}})};var g=async({page:e})=>{await e.waitForFunction(()=>window.Clerk!==void 0),await e.waitForFunction(()=>window.Clerk.loaded)},O=async({page:e,signInParams:r,setupClerkTestingTokenOptions:t})=>{let o=e.context();if(!o)throw new Error("Page context is not available. Make sure the page is properly initialized.");await k({context:o,options:t}),await g({page:e}),await e.evaluate(_,{signInParams:r})},b=async({page:e,signOutOptions:r})=>{await g({page:e}),await e.evaluate(async t=>{await window.Clerk.signOut(t)},r)},T={signIn:O,signOut:b,loaded:g};0&&(module.exports={clerk,clerkSetup,setupClerkTestingToken});
+       Learn more here: https://clerk.com/docs/testing/test-emails-and-phones#email-addresses`);let{supportedFirstFactors:n}=await o.create({identifier:e.identifier}),c=e.strategy==="phone_code"?s=>s.strategy==="phone_code":s=>s.strategy==="email_code",i=n?.find(c);if(i){let s=e.strategy==="phone_code"?{strategy:e.strategy,phoneNumberId:i.phoneNumberId}:{strategy:e.strategy,emailAddressId:i.emailAddressId};await o.prepareFirstFactor(s);let a=await o.attemptFirstFactor({strategy:e.strategy,code:"424242"});if(a.status==="complete")await t.Clerk.setActive({session:a.createdSessionId});else throw new Error(`Status is ${a.status}`)}else throw new Error(`${e.strategy} is not enabled.`)}}catch(t){throw new Error(`Clerk: Failed to sign in: ${t?.message}`)}};var f=async e=>{let{CLERK_FAPI:r,CLERK_TESTING_TOKEN:t}=await y(e);process.env.CLERK_FAPI=r,process.env.CLERK_TESTING_TOKEN=t};var k=async({context:e,options:r,page:t})=>{let o=e??t?.context();if(!o)throw new Error("Either context or page must be provided to setup testing token");let n=r?.frontendApiUrl||process.env.CLERK_FAPI;if(!n)throw new Error(h);let c=`https://${n}/v1/**/*`;await o.route(c,async i=>{let s=new URL(i.request().url()),a=process.env.CLERK_TESTING_TOKEN;a&&s.searchParams.set(E,a);try{let m=await i.fetch({url:s.toString()}),l=await m.json();l?.response?.captcha_bypass===!1&&(l.response.captcha_bypass=!0),l?.client?.captcha_bypass===!1&&(l.client.captcha_bypass=!0),await i.fulfill({response:m,json:l})}catch{await i.continue({url:s.toString()}).catch(console.error)}})};var g=async({page:e})=>{await e.waitForFunction(()=>window.Clerk!==void 0),await e.waitForFunction(()=>window.Clerk.loaded)},O=async({page:e,signInParams:r,setupClerkTestingTokenOptions:t})=>{let o=e.context();if(!o)throw new Error("Page context is not available. Make sure the page is properly initialized.");await k({context:o,options:t}),await g({page:e}),await e.evaluate(({signInParams})=>{const win=window;if(!win.Clerk?.client)return;const signIn=win.Clerk.client.signIn;if(signInParams.strategy==="password"){return signIn.create(signInParams).then(({createdSessionId})=>win.Clerk.setActive({session:createdSessionId}));}throw new Error("Only password strategy supported in test patch");},{signInParams:r});},b=async({page:e,signOutOptions:r})=>{await g({page:e}),await e.evaluate(async t=>{await window.Clerk.signOut(t)},r)},T={signIn:O,signOut:b,loaded:g};0&&(module.exports={clerk,clerkSetup,setupClerkTestingToken});
 //# sourceMappingURL=index.js.map
\ No newline at end of file
